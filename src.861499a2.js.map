{"version":3,"sources":["index.js"],"names":["Timer","constructor","selector","targetDate","currentTime","Date","now","time","days","hours","mins","secs","getTimeComponents","updateTimeFields","getFieldsBySelector","start","setDate","timer","setInterval","refs","document","querySelector","textContent","pad","Math","floor","value","String","padStart"],"mappings":";;;AAmDA,aAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnDA,QAAA,oBACA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IAUd,EAAA,KAAA,UAAA,KACFC,MAAAA,EAAcC,KAAKC,MACnBC,EAAO,KAAKJ,WAAaC,GACzB,KAAEI,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKC,kBAAkBL,GACtDM,KAAAA,iBAAiB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,MAbtCJ,KAAAA,KAAO,KAAKO,oBAAoBZ,GAChCC,KAAAA,WAAaA,EACbY,KAAAA,QAGPA,QACOC,KAAAA,UACAC,KAAAA,MAAQC,YAAY,IAAM,KAAKF,UAAW,KASjDF,oBAAoBZ,GAQXiB,MAPM,CACXX,KAAMY,SAASC,iBAAiBnB,yBAChCO,MAAOW,SAASC,iBAAiBnB,0BACjCQ,KAAMU,SAASC,iBAAiBnB,yBAChCS,KAAMS,SAASC,iBAAiBnB,0BAMpCW,kBAAiB,KAAEL,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC/BJ,KAAAA,KAAKC,KAAKc,YAAcd,EACxBD,KAAAA,KAAKE,MAAMa,YAAcb,EACzBF,KAAAA,KAAKG,KAAKY,YAAcZ,EACxBH,KAAAA,KAAKI,KAAKW,YAAcX,EAG/BC,kBAAkBL,GAMT,MAAA,CAAEC,KALI,KAAKe,IAAIC,KAAKC,MAAMlB,EAAQ,QAK1BE,MAJD,KAAKc,IAAIC,KAAKC,MAAOlB,EAAQ,MAAyB,OAI9CG,KAHT,KAAKa,IAAIC,KAAKC,MAAOlB,EAAQ,KAAoB,MAGlCI,KAFf,KAAKY,IAAIC,KAAKC,MAAOlB,EAAQ,IAAc,OAK1DgB,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,IAAI5B,EAAM,CACRE,SAAU,WACVC,WAAY,IAAIE,KAAK","file":"src.861499a2.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\nclass Timer {\n  constructor({ selector, targetDate }) {\n    this.time = this.getFieldsBySelector(selector);\n    this.targetDate = targetDate;\n    this.start();\n  }\n\n  start() {\n    this.setDate();\n    this.timer = setInterval(() => this.setDate(), 1000);\n  }\n  setDate = () => {\n    const currentTime = Date.now();\n    const time = this.targetDate - currentTime;\n    const { days, hours, mins, secs } = this.getTimeComponents(time);\n    this.updateTimeFields({ days, hours, mins, secs });\n  };\n\n  getFieldsBySelector(selector) {\n    const refs = {\n      days: document.querySelector(`${selector} [data-value=\"days\"]`),\n      hours: document.querySelector(`${selector} [data-value=\"hours\"]`),\n      mins: document.querySelector(`${selector} [data-value=\"mins\"]`),\n      secs: document.querySelector(`${selector} [data-value=\"secs\"]`),\n    };\n\n    return refs;\n  }\n\n  updateTimeFields({ days, hours, mins, secs }) {\n    this.time.days.textContent = days;\n    this.time.hours.textContent = hours;\n    this.time.mins.textContent = mins;\n    this.time.secs.textContent = secs;\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nnew Timer({\n  selector: '#timer-1',\n  targetDate: new Date('Aug 31, 2021'),\n});\n"]}