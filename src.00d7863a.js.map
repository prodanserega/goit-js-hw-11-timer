{"version":3,"sources":["index.js"],"names":["Timer","constructor","selector","targetDate","time","getFieldsBySelector","start","currentTime","Date","now","days","hours","mins","secs","getTimeComponents","updateTimeFields","setInterval","refs","document","querySelector","textContent","pad","Math","floor","value","String","padStart"],"mappings":";;;AAoDA,aApDA,QAAA,oBACA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBC,KAAAA,KAAO,KAAKC,oBAAoBH,GAChCC,KAAAA,WAAaA,EACbG,KAAAA,QAGPA,QACQC,MAAAA,EAAcC,KAAKC,MACnBL,EAAO,KAAKD,WAAaI,GACzB,KAAEG,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKC,kBAAkBV,GACtDW,KAAAA,iBAAiB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IAC3CG,YAAY,KACJT,MAAAA,EAAcC,KAAKC,MACnBL,EAAO,KAAKD,WAAaI,GACzB,KAAEG,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKC,kBAAkBV,GACtDW,KAAAA,iBAAiB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,KAAW,KAG1DR,oBAAoBH,GAQXe,MAPM,CACXP,KAAMQ,SAASC,iBAAiBjB,yBAChCS,MAAOO,SAASC,iBAAiBjB,0BACjCU,KAAMM,SAASC,iBAAiBjB,yBAChCW,KAAMK,SAASC,iBAAiBjB,0BAMpCa,kBAAiB,KAAEL,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC/BT,KAAAA,KAAKM,KAAKU,YAAcV,EACxBN,KAAAA,KAAKO,MAAMS,YAAcT,EACzBP,KAAAA,KAAKQ,KAAKQ,YAAcR,EACxBR,KAAAA,KAAKS,KAAKO,YAAcP,EAG/BC,kBAAkBV,GAMT,MAAA,CAAEM,KALI,KAAKW,IAAIC,KAAKC,MAAMnB,EAAQ,QAK1BO,MAJD,KAAKU,IAAIC,KAAKC,MAAOnB,EAAQ,MAAyB,OAI9CQ,KAHT,KAAKS,IAAIC,KAAKC,MAAOnB,EAAQ,KAAoB,MAGlCS,KAFf,KAAKQ,IAAIC,KAAKC,MAAOnB,EAAQ,IAAc,OAK1DiB,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,IAAI1B,EAAM,CACRE,SAAU,WACVC,WAAY,IAAIK,KAAK","file":"src.00d7863a.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\nclass Timer {\n  constructor({ selector, targetDate }) {\n    this.time = this.getFieldsBySelector(selector);\n    this.targetDate = targetDate;\n    this.start();\n  }\n\n  start() {\n    const currentTime = Date.now();\n    const time = this.targetDate - currentTime;\n    const { days, hours, mins, secs } = this.getTimeComponents(time);\n    this.updateTimeFields({ days, hours, mins, secs });\n    setInterval(() => {\n      const currentTime = Date.now();\n      const time = this.targetDate - currentTime;\n      const { days, hours, mins, secs } = this.getTimeComponents(time);\n      this.updateTimeFields({ days, hours, mins, secs });}, 1000);\n  }\n\n  getFieldsBySelector(selector) {\n    const refs = {\n      days: document.querySelector(`${selector} [data-value=\"days\"]`),\n      hours: document.querySelector(`${selector} [data-value=\"hours\"]`),\n      mins: document.querySelector(`${selector} [data-value=\"mins\"]`),\n      secs: document.querySelector(`${selector} [data-value=\"secs\"]`),\n    };\n\n    return refs;\n  }\n\n  updateTimeFields({ days, hours, mins, secs }) {\n    this.time.days.textContent = days;\n    this.time.hours.textContent = hours;\n    this.time.mins.textContent = mins;\n    this.time.secs.textContent = secs;\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nnew Timer({\n  selector: '#timer-1',\n  targetDate: new Date('Aug 31, 2021'),\n});\n"]}